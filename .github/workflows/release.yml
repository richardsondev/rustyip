name: CI

on:
  push:
    branches:
      - main
  release:
    types: [released]
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  common:
    name: Common Steps
    timeout-minutes: 10
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Validate Version
        if: github.event_name == 'release'
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n 1 | cut -d '"' -f 2)
          if [ "${{ github.event.release.tag_name }}" != "$VERSION" ]; then
            echo "Version in Cargo.toml ($VERSION) does not match tag (${{ github.event.release.tag_name }})"
            exit 1
          fi

      - uses: advanced-security/generate-sbom-action@v1
        id: gensbom

      - uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: ${{ steps.gensbom.outputs.fileName }}

      - name: Upload SBOM Release Asset
        if: github.event_name == 'release'
        id: upload-sbom-release-asset
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ steps.gensbom.outputs.fileName }}#"sbom"

  build:
    needs: common
    name: Build and Release
    timeout-minutes: 10
    permissions:
      contents: write
    strategy:
      matrix:
        target:
          # Windows
          - { displayName: 32-bit Windows,
              rustTarget: i686-pc-windows-gnu,
              runner: ubuntu-latest }

          - { displayName: 64-bit Windows,
              rustTarget: x86_64-pc-windows-gnu,
              runner: ubuntu-latest,
              rustflags: '-C target-cpu=x86-64 -C target-feature=-avx,-avx2,-bmi,-bmi2,-fma' }

          - { displayName: 64-bit Windows (skylake),
              displaySubName: skylake,
              rustTarget: x86_64-pc-windows-gnu,
              runner: ubuntu-latest,
              rustflags: '-C target-cpu=skylake' }

          - { displayName: 64-bit Windows (znver3),
              displaySubName: znver3,
              rustTarget: x86_64-pc-windows-gnu,
              runner: ubuntu-latest,
              rustflags: '-C target-cpu=znver3' }

          # Linux
          - { displayName: 32-bit Linux,
              rustTarget: i686-unknown-linux-gnu,
              runner: ubuntu-latest }

          - { displayName: 64-bit Linux,
              rustTarget: x86_64-unknown-linux-gnu,
              runner: ubuntu-latest,
              rustflags: '-C target-cpu=x86-64 -C target-feature=-avx,-avx2,-bmi,-bmi2,-fma' }

          - { displayName: 64-bit Linux (skylake),
              displaySubName: skylake,
              rustTarget: x86_64-unknown-linux-gnu,
              runner: ubuntu-latest,
              rustflags: '-C target-cpu=skylake' }

          - { displayName: 64-bit Linux (znver3),
              displaySubName: znver3,
              rustTarget: x86_64-unknown-linux-gnu,
              runner: ubuntu-latest,
              rustflags: '-C target-cpu=znver3' }

          - { displayName: ARM32 ARMv6 Linux,
              rustTarget: arm-unknown-linux-gnueabi,
              runner: ubuntu-latest }

          - { displayName: ARM32 ARMv7 Linux,
              rustTarget: armv7-unknown-linux-gnueabihf,
              runner: ubuntu-latest }

          - { displayName: ARM64 Linux,
              rustTarget: aarch64-unknown-linux-gnu,
              runner: ubuntu-latest }

          - { displayName: MIPS64 Linux,
              rustTarget: mips64-unknown-linux-gnuabi64,
              runner: ubuntu-latest,
              nightly: true }

          # macOS
          - { displayName: 64-bit macOS,
              rustTarget: x86_64-apple-darwin,
              runner: macos-latest,
              rustflags: '-C target-cpu=x86-64 -C target-feature=-avx,-avx2,-bmi,-bmi2,-fma' }

          - { displayName: 64-bit macOS (skylake),
              displaySubName: skylake,
              rustTarget: x86_64-apple-darwin,
              runner: macos-latest,
              rustflags: '-C target-cpu=skylake' }

          - { displayName: ARM64 macOS,
              rustTarget: aarch64-apple-darwin,
              runner: macos-latest }

    runs-on: ${{ matrix.target.runner }}
    steps:
      # Get the machine ready to build
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target.rustTarget }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target.rustTarget }}-cargo-

      - name: Update apt-get package list
        if: ${{ contains(matrix.target.runner, 'ubuntu') }}
        run: sudo apt-get update
 
      - name: Install latest nightly
        if: ${{ matrix.target.nightly || false }}
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rust-src

      - name: Add Rust Target
        if: ${{ !matrix.target.nightly }}
        run: rustup target add ${{ matrix.target.rustTarget }}

      - name: Update Sources
        if: ${{ contains(matrix.target.rustTarget, 'linux') }}
        run: sudo apt update

      - name: Add Windows Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'pc-windows') }}
        run: sudo apt install -y gcc-mingw-w64
      
      - name: Add ARM32 Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'arm') && contains(matrix.target.rustTarget, 'linux') }}
        run: sudo apt install -y gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi gcc-arm-none-eabi binutils-arm-linux-gnueabi
      
      - name: Add ARM64 Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'aarch64') && contains(matrix.target.rustTarget, 'linux') }}
        run: sudo apt install -y gcc-aarch64-linux-gnu crossbuild-essential-arm64
  
      - name: Add MIPS64 Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'mips64') }}
        run: sudo apt install -y gcc-mips64-linux-gnuabi64 crossbuild-essential-mips64

      - name: Add 32-bit Linux Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'i686-unknown-linux-gnu') }}
        run: sudo apt install -y gcc-multilib

      # Build time
      - name: Build
        if: ${{ !matrix.target.nightly }}
        env:
          RUSTFLAGS: ${{ matrix.target.rustflags || '' }}
          CARGO_PROFILE_RELEASE_STRIP: true
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_PANIC: abort
          CARGO_PROFILE_RELEASE_OPT_LEVEL: z
        run: |
          cargo build --release --target ${{ matrix.target.rustTarget }} --features small-binary --no-default-features

      - name: Build with nightly
        if: ${{ matrix.target.nightly || false }}
        env:
          RUSTFLAGS: ${{ matrix.target.rustflags || '' }}
          CARGO_PROFILE_RELEASE_STRIP: true
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_PANIC: abort
          CARGO_PROFILE_RELEASE_OPT_LEVEL: z
        run: |
          cargo +nightly build -Z build-std --release --target ${{ matrix.target.rustTarget }} --features small-binary --no-default-features

      # Post-build binary stripping for additional size reduction
      - name: Strip Binary (Linux/macOS)
        if: ${{ !endsWith(matrix.target.rustTarget, '-windows-gnu') }}
        run: |
          if command -v strip >/dev/null 2>&1; then
            strip ./target/${{ matrix.target.rustTarget }}/release/RustyIP
            echo "Binary stripped successfully"
            ls -lh ./target/${{ matrix.target.rustTarget }}/release/RustyIP
          fi

      - name: Upload Asset
        uses: actions/upload-artifact@v4
        with:
          name: RustyIP-${{ matrix.target.rustTarget }}${{ matrix.target.displaySubName != '' && format('-{0}', matrix.target.displaySubName) || '' }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }}
          path: ./target/${{ matrix.target.rustTarget }}/release/RustyIP${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }}

      - name: Upload Release Asset
        if: github.event_name == 'release'
        id: upload-release-asset
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          cp ./target/${{ matrix.target.rustTarget }}/release/RustyIP${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }} ./RustyIP-${{ github.ref_name }}-${{ matrix.target.rustTarget }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }} &&
          gh release upload ${{ github.event.release.tag_name }} ./RustyIP-${{ github.ref_name }}-${{ matrix.target.rustTarget }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }}#"RustyIP-${{ github.ref_name }}-${{ matrix.target.rustTarget }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }} (${{ matrix.target.displayName }})"
