name: CI

on:
  push:
    branches:
      - main
  release:
    types: [released]
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Release
    timeout-minutes: 10
    permissions:
      contents: write
    strategy:
      matrix:
        target:
          # Windows
          - { displayName: 32-bit Windows,
              rustTarget: i686-pc-windows-gnu,
              runner: 'ubuntu-latest' }

          - { displayName: 64-bit Windows,
              rustTarget: x86_64-pc-windows-gnu,
              runner: 'ubuntu-latest' }

          # Linux
          - { displayName: 32-bit Linux,
              rustTarget: i686-unknown-linux-gnu,
              runner: 'ubuntu-latest' }

          - { displayName: 64-bit Linux,
              rustTarget: x86_64-unknown-linux-gnu,
              runner: 'ubuntu-latest' }

          - { displayName: ARM32 ARMv6 Linux,
              rustTarget: arm-unknown-linux-gnueabi,
              runner: 'ubuntu-latest' }

          - { displayName: ARM32 ARMv7 Linux,
              rustTarget: armv7-unknown-linux-gnueabihf,
              runner: 'ubuntu-latest' }

          - { displayName: ARM64 Linux,
              rustTarget: aarch64-unknown-linux-gnu,
              runner: 'ubuntu-latest' }

          - { displayName: MIPS Linux,
              rustTarget: mips-unknown-linux-musl,
              runner: 'ubuntu-latest',
              nightly: true }

          - { displayName: MIPS64 Linux,
              rustTarget: mips64-unknown-linux-muslabi64,
              runner: 'ubuntu-latest',
              nightly: true }

          # macOS
          - { displayName: 64-bit macOS,
              rustTarget: x86_64-apple-darwin,
              runner: 'macos-latest' }
    
          - { displayName: ARM64 macOS,
              rustTarget: aarch64-apple-darwin,
              runner: 'macos-latest' }

    runs-on: ${{ matrix.target.runner }}
    steps:
      # Get the machine ready to build
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Install latest nightly
        if: ${{ matrix.target.nightly || false }}
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rust-src

      - name: Add Rust Target
        if: ${{ !matrix.target.nightly }}
        run: rustup target add ${{ matrix.target.rustTarget }}

      - name: Update Sources
        if: ${{ contains(matrix.target.rustTarget, 'linux') }}
        run: sudo apt update

      - name: Add Windows Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'pc-windows') }}
        run: sudo apt install -y gcc-mingw-w64

      - name: Add ARM32 Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'arm') && contains(matrix.target.rustTarget, 'linux') }}
        run: sudo apt install -y gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi gcc-arm-none-eabi binutils-arm-linux-gnueabi

      - name: Add ARM64 Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'aarch64') && contains(matrix.target.rustTarget, 'linux') }}
        run: sudo apt install -y gcc-aarch64-linux-gnu crossbuild-essential-arm64

      - name: Add MIPS32 musl Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'mips-unknown-linux-musl') }}
        run: |
          sudo apt install -y musl-tools gcc-mips-linux-gnu
          export PATH=/opt/mips-linux-musl-cross/bin:$PATH

      - name: Add MIPS64 musl Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'mips64-unknown-linux-musl') }}
        run: |
          sudo apt install -y musl-tools gcc-mips64-linux-gnuabi64
          export PATH=/opt/mips64-linux-musl-cross/bin:$PATH

      - name: Add 32-bit Linux Build Dependencies
        if: ${{ contains(matrix.target.rustTarget, 'i686-unknown-linux-gnu') }}
        run: sudo apt install -y gcc-multilib

      # Build time
      - name: Build
        if: ${{ !matrix.target.nightly }}
        run: cargo build --release --target ${{ matrix.target.rustTarget }}

      - name: Build with nightly
        if: ${{ matrix.target.nightly || false }}
        run: cargo +nightly build -Z build-std --release --target ${{ matrix.target.rustTarget }}

      - name: Upload Asset
        uses: actions/upload-artifact@v4
        with:
          name: RustyIP-${{ matrix.target.rustTarget }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }}
          path: ./target/${{ matrix.target.rustTarget }}/release/RustyIP${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }}

      - name: Upload Release Asset
        if: github.event_name == 'release'
        id: upload-release-asset
        env:
          GH_TOKEN: ${{ github.token }}
        run:
          cp ./target/${{ matrix.target.rustTarget }}/release/RustyIP${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }} ./RustyIP-${{ github.ref_name }}-${{ matrix.target.rustTarget }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }} &&
          gh release upload ${{ github.event.release.tag_name }} ./RustyIP-${{ github.ref_name }}-${{ matrix.target.rustTarget }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }}#"RustyIP-${{ github.ref_name }}-${{ matrix.target.rustTarget }}${{ endsWith(matrix.target.rustTarget, '-windows-gnu') && '.exe' || '' }} (${{ matrix.target.displayName }})"
