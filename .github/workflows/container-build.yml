name: Container Build

on:
  push:
    branches:
      - main
  release:
    types: [released]
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  docker:
    name: Docker Build and Test
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Test Multi-Architecture Image
        run: |
          echo "ðŸ”¨ Building and testing Docker image for all platforms..."
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --target tester \
            -t rustyip:test \
            .
          echo "âœ… Multi-platform build and test completed successfully!"

      - name: Build Final Production Images
        run: |
          echo "ðŸš€ Building production Docker images for all platforms..."
          # Build and save individual platform images for artifacts
          for platform in "linux/amd64" "linux/arm64" "linux/arm/v7"; do
            platform_tag=$(echo "$platform" | tr '/' '-')
            echo "Building for $platform..."
            docker buildx build \
              --platform $platform \
              -t rustyip:production-${platform_tag} \
              --load \
              .
          done
          echo "âœ… All production images built successfully!"

      - name: Archive Docker Images
        run: |
          echo "ðŸ“¦ Saving Docker images to tar archives..."
          for platform in "linux/amd64" "linux/arm64" "linux/arm/v7"; do
            platform_tag=$(echo "$platform" | tr '/' '-')
            echo "Archiving rustyip:production-${platform_tag}..."
            docker save rustyip:production-${platform_tag} | gzip > rustyip-container-${platform_tag}.tar.gz
            ls -lh rustyip-container-${platform_tag}.tar.gz
          done

      - name: Upload Image Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustyip-containers-${{ github.sha }}
          path: rustyip-container-*.tar.gz
          retention-days: 30
          compression-level: 0

      - name: Upload Images to Release
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "ðŸš€ Uploading container images to release..."
          for archive in rustyip-container-*.tar.gz; do
            echo "Uploading $archive..."
            gh release upload ${{ github.event.release.tag_name }} "$archive" --clobber
          done

  multi-arch-registry:
    name: Push Multi-Architecture Image to Registry
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/rustyip
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Build and Push Multi-Architecture Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
